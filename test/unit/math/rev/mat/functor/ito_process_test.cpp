#include <stan/math.hpp>
#include <stan/math/rev/core.hpp>
#include <stan/math/rev/mat/functor/ito_process_integrator.hpp>
#include <test/unit/math/rev/mat/fun/util.hpp>
#include <test/unit/util.hpp>
#include <gtest/gtest.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <vector>

using stan::math::ito_process_euler;
using stan::math::var;

struct linear_1d_sde {
  template<typename Ty, typename T>
  inline Eigen::Matrix<typename stan::return_type<Ty, T>::type, -1, 1>
  operator()(const Eigen::Matrix<Ty, -1, 1>& y, const std::vector<T>& theta) const {
    return theta[0] * y;
  }
};

TEST(ito_process_euler_test, linear_1d) {
  linear_1d_sde f1;
  linear_1d_sde f2;

  const size_t n = 100;
  Eigen::MatrixXd step_normal(1, n);
  step_normal <<
  -0.227031346,  0.458041443, -1.579591365,  1.175445492,  0.119544588,
   0.558492074,  1.105970751, -1.436829855,  0.342849252, -1.345981060,
  -0.550210348,  1.197567836,  0.051984390, -0.605358174,  0.734544128,
   0.353114406,  0.019629616,  0.562807970, -1.465477762,  0.678149017,
  -0.171619676,  1.175385076,  1.519844138, -0.346590383, -0.745657647,
  -0.328375998,  0.068063898, -1.783454633,  0.013063462,  0.714949560,
  -1.114476575,  0.006569428,  0.498795072, -0.082497795, -0.570758809,
   1.277299748,  0.240810730,  2.110826049,  0.330361802, -0.300154027,
  -1.020465365, -0.163852017, -1.993294496,  0.447473730,  0.010716684,
  -0.491290787, -0.568813674,  0.068327523,  0.784916059,  1.552803020,
   2.768448761,  0.588521589, -1.263617390,  0.118946927, -0.891862091,
   0.287182207, -0.490645341, -0.849732427, -0.151875223, -0.270740843,
  -0.254553642, -2.021715555,  1.291047437, -0.895050476, -0.869481380,
   1.705331080,  1.046698757, -0.829974183, -0.677389072,  0.187091578,
   1.111322910,  0.783582215,  1.290011615, -0.043900397,  0.272410938,
   2.348848679, -0.467825001,  2.209460577,  0.032898713,  1.205695917,
  -1.374362365, -0.091768263,  0.070804504, -0.509105393,  0.065652878,
   0.898239917,  0.067963672,  0.424453990,  0.731980187,  1.830465840,
  -0.990680249, -1.982484822,  0.055027686, -0.783264035,  0.793723338,
  -0.275728723,  1.267190326, -0.500147232, -1.001674061,  1.287339032;

  const std::vector<double> mu{2.0};
  const std::vector<double> sigma{1.0};
  Eigen::Matrix<double, -1, 1> y0(1);
  y0 << 1.0;
  
  const double t_end = 0.1;
  Eigen::MatrixXd y = ito_process_euler(f1, f2, y0, step_normal, mu, sigma, t_end);

  // exact solution
  const double h = t_end / double(n);
  double y_exact;
  
  double wiener = 0.0;
  for (int i = 0; i < n; ++i) {
    wiener += sqrt(h) * step_normal(i);
    y_exact = y0[0] * stan::math::exp((mu[0] - 0.5 * sigma[0] * sigma[0] ) * i * h + sigma[0] * wiener);
    EXPECT_NEAR(y(i), y_exact, 7.5e-3);
  }
}

/*
 * Stochastic SIR model by
 * 
 * Tornatore, E., Buccellato, S. M., and Vetro, P. Stability of a stochastic SIR system.
 * Physica A: Statistical Mechanics and its Applications 354, 15 (2005), 111–126.
 * 
 */
struct stochastic_sir_drift {
  /*
   * @c theta = {alpha, beta, gamma, delta}
   */
  template<typename Ty, typename T>
  inline Eigen::Matrix<typename stan::return_type<Ty, T>::type, -1, 1>
  operator()(const Eigen::Matrix<Ty, -1, 1>& y, const std::vector<T>& theta) const {
    using scalar_t = typename stan::return_type<Ty, T>::type;
    Eigen::Matrix<scalar_t, -1, 1> res = Eigen::Matrix<scalar_t, -1, 1>::Zero(3);
    const T& a = theta[0];
    const T& c = theta[2];
    const T& d = theta[3];
    if (y(0) > 0 && y(1) > 0 && y(2) > 0) {
      res(0) = -a * y(0) * y(1) - d * y(0) + d;
      res(1) = a * y(0) * y(1) - (c + d) * y(1);
      res(2) = c * y(1) - d * y(2);
    }
    return res;
  }
};

/*
 * Stochastic SIR model by
 * 
 * Tornatore, E., Buccellato, S. M., and Vetro, P. Stability of a stochastic SIR system.
 * Physica A: Statistical Mechanics and its Applications 354, 15 (2005), 111–126.
 * 
 * which shows that the system has disease-free state {1.0, 0.0, 0.0} with
 * globally asymptotically Lyapunov stability.
 *
 */
struct stochastic_sir_diffusion {
  /*
   * @c theta = {alpha, beta, gamma, delta}
   */
  template<typename Ty, typename T>
  inline Eigen::Matrix<typename stan::return_type<Ty, T>::type, -1, 1>
  operator()(const Eigen::Matrix<Ty, -1, 1>& y, const std::vector<T>& theta) const {
    using scalar_t = typename stan::return_type<Ty, T>::type;
    Eigen::Matrix<scalar_t, -1, 1> res = Eigen::Matrix<scalar_t, -1, 1>::Zero(3);
    const T& b = theta[1];
    if (y(0) > 0 && y(1) > 0 && y(2) > 0) {
      res(0) = -b * y(0) * y(1);
      res(1) =  b * y(0) * y(1);
    }
    return res;
  }
};

TEST(ito_process_euler_test, stochastic_SIR) {
  stochastic_sir_drift f1;
  stochastic_sir_diffusion f2;

  const size_t n = 100;
  Eigen::MatrixXd step_normal(1, n);
  step_normal <<
   -1.57897441, -0.35818871,  2.03659328, -0.17945727,  0.35367191, -0.01355063,
   -0.14308078, -0.52589990,  0.62348373, -0.67316549, -0.28270535,  2.20480659,
   -0.36244412, -0.05279088, -1.60581425,  0.99302399,  1.75852801,  0.72132252,
   -0.90468343,  0.71028153,  0.42509134,  0.25898053,  0.93533781, -0.74418412,
   -0.17784473,  0.37595112, -1.78233997,  1.47856031, -1.52410228,  0.06331306,
    0.34682617,  0.02567723,  1.04596529,  0.15888549,  1.05681907, -0.05950151,
    0.09813256, -0.84812529,  0.73265170,  1.24724395,  0.27976836, -0.20927854,
    1.35064100,  0.14255626, -0.77789686, -1.25477575,  0.29630693, -0.36178728,
   -0.67998419, -1.12509306,  0.31940237, -0.22758767, -0.37014759,  0.18617732,
    0.27857130,  0.22387955,  1.77981157, -1.57242888,  0.87122817,  0.29855531,
   -1.04155339, -0.69416972, -2.05525811,  0.98246207, -0.91522730,  0.13531040,
   -1.17055068, -0.02005696,  0.95412267,  0.30238508,  0.62161288,  0.80191187,
    0.52468362, -1.23489973, -0.42102839, -1.27908801, -1.22746536,  0.67593309,
    0.65218103,  0.25098710,  0.33533639, -0.14092592, -1.71517241, -1.91633767,
    0.06401554, -0.15272495,  1.96062817, -0.44781888,  0.37903729, -2.16222328,
   -0.48631562,  0.95008125,  0.15529862, -1.12904730, -2.16615155, -0.21537449,
    1.47482641, -0.05169457,  2.00635913, -0.01466573;
  
  // stable solution, used for test
  const std::vector<var> theta{0.2, 0.15, 0.1, 0.2};

  // less stable solution, takes longer to reach fixed point.
  // const std::vector<var> theta{0.31, 0.20, 0.1, 0.2};

  // unstable solution
  // const std::vector<var> theta{0.50, 0.20, 0.1, 0.2};

  Eigen::Matrix<double, -1, 1> y0(3);
  y0 << 0.975, 0.020, 0.005;

  const double t_end = 100.0;
  Eigen::Matrix<var, -1, -1> y = ito_process_euler(f1, f2, y0, step_normal, theta, theta, t_end);
  EXPECT_NEAR(y(0, n-1).val(), 1.0, 5e-7);
  EXPECT_NEAR(y(1, n-1).val(), 0.0, 1e-7);
  EXPECT_NEAR(y(2, n-1).val(), 0.0, 5e-7);
}

/*
 * Heston model for stochastic volatility, with unknowns
 * (s, v) as (asset, volatility)
 *
 * To ensure that the volitity is non-negative, we 
 * truncate the drift and diffusion of the volitity
 *
 * @c parameters = 
 * μ is the drift of the asset
 * θ is the long run average price variance(mean of v(t))
 * κ is the rate of mean reversion of v(t) to the long run average θ
 * ξ is the variance of v(t)
 * 
 */
struct heston_drift {
  template<typename Ty, typename T>
  inline Eigen::Matrix<typename stan::return_type<Ty, T>::type, -1, 1>
  operator()(const Eigen::Matrix<Ty, -1, 1>& y, const std::vector<T>& parameters) const {
    using scalar_t = typename stan::return_type<Ty, T>::type;
    Eigen::Matrix<scalar_t, -1, 1> res = Eigen::Matrix<scalar_t, -1, 1>::Zero(2);
    const T& mu    = parameters[0];
    const T& theta = parameters[1];
    const T& kappa = parameters[2];
    const T& xi    = parameters[3];

    // asset
    res(0) = mu * y(0);
    // volatility based on truncated previous step
    res(1) = kappa * (theta - stan::math::fmax(y(1), 0.0));

    return res;
  }
};

struct heston_diffusion {
  template<typename Ty, typename T>
  inline Eigen::Matrix<typename stan::return_type<Ty, T>::type, -1, -1>
  operator()(const Eigen::Matrix<Ty, -1, 1>& y, const std::vector<T>& parameters) const {
    using scalar_t = typename stan::return_type<Ty, T>::type;
    Eigen::Matrix<scalar_t, -1, -1> res = Eigen::Matrix<scalar_t, -1, -1>::Zero(2, 2);
    const T& mu    = parameters[0];
    const T& theta = parameters[1];
    const T& kappa = parameters[2];
    const T& xi    = parameters[3];

    // asset
    res(0, 0) = sqrt(stan::math::fmax(y(1), 0.0)) * y(0);
    // volatility based on truncated previous step
    res(1, 1) = xi * sqrt(stan::math::fmax(y(1), 0.0));

    return res;
  }
};

TEST(ito_process_euler_test, heston_volitity) {
  heston_drift f1;
  heston_diffusion f2;

  const size_t n = 365;
  Eigen::Matrix<var, -1, 1> step_normal_asset(n), step_normal_vol(n), step_normal_helper(n);
  step_normal_asset <<
    -0.6706287025, -0.5386672890,  0.4129538031, -0.4721326886, -1.8246555990,
    -0.3329176803,  1.2784930357,  0.3205024067,  0.3257357307, -0.5904983172,
     0.6660972122,  0.0368472766, -0.1487105813, -0.7797946271,  0.1879794723,
    -0.8708528166, -0.0403763733,  1.0054293964, -0.1699379453, -1.5839651800,
     0.9230887864,  0.6979352111,  0.9019190240, -0.3441089636,  1.5539727665,
     0.6499582431,  0.5452422455,  0.5609982598, -1.0159186591,  0.1050608651,
     0.8403734741, -0.2381211210, -0.2837585986,  0.1350500350,  1.0705084020,
     0.4627812036, -0.3111840516,  0.9286088179,  1.0453284519, -1.5445495315,
     0.3367462505,  0.4289336732,  0.9637957582, -1.8094594437, -0.2828367228,
     0.5215267602,  0.1999716509,  0.4619119161, -0.0673402371,  1.4406650882,
    -1.0235221508,  1.0364550427,  1.2251573627,  0.6870949795,  0.4445452088,
     0.9235570232, -0.3605079346, -2.2105546736, -0.2625786862,  1.4579984807,
     0.7314876386,  1.3779775363, -1.5457483581, -0.2598718253,  0.3294728242,
     0.6348133963, -0.3078341850, -0.0395327717, -0.7129366656,  0.8125775780,
     0.2404548517, -0.2463370279, -1.0868375944,  1.7931368262, -1.4290759383,
     0.0717357399,  0.9139643631,  0.9057584244,  0.7925474416, -1.2610878041,
     0.6890921853, -0.0412911895,  1.5959193403,  0.2807931813, -1.0095032522,
     0.1662556949,  0.6023801589, -0.9844507995,  0.6963802146,  0.7792183531,
     0.2604587222,  0.5394444724, -1.6835225542, -0.2825859138, -0.7441098395,
    -0.2674218482,  0.1696382627,  1.0141040886, -0.4522632901, -0.9651255064,
     0.7752933527,  2.2450991592, -0.2310034300,  0.0839174116, -0.6948300940,
    -1.2009280188, -0.1991208589, -0.5235179707, -0.1878118670,  0.4509025900,
    -0.0254296393,  0.4536220305, -0.8228592895,  1.0121910795, -0.6141734335,
     1.1340910542,  0.3792148888, -0.9500081776, -0.5653155689, -0.4498150092,
     0.5627480494,  0.6540862190,  0.2349318895,  0.8022955292,  1.6701873423,
     0.5803577626, -0.3268830406,  0.0816848915, -0.0435433931, -0.9414319910,
     1.7112796166,  2.0226405341, -2.2504523076, -0.0407316354, -1.4293695516,
     2.4583629726, -1.8634796401, -0.9211151395,  1.0385778666, -0.3712940600,
    -0.2666431459, -1.2591915042, -0.2876797575, -1.5743944275, -0.5646238324,
     1.6667153311, -0.4186821229,  0.6903103091, -0.1449864741, -0.1483688126,
     0.2526392163, -2.3582136802, -0.4831010060, -0.9277718470, -1.1239732655,
     1.2759964979,  1.0445524243,  0.1896845685, -0.7448983426, -1.4046206301,
     1.3152302274, -0.2915051796, -0.4492490114,  0.8162907806,  0.0546929092,
     0.1901973989,  0.8180333572, -1.1772550556,  0.1459918918,  1.2159818420,
     1.3691069696,  0.5605706296,  0.2628018507,  2.4455438124,  1.0132788511,
     0.3042397139, -0.3451935751,  0.7166882486, -0.7763963812, -0.9763880310,
     0.4108808490, -1.5458368584, -0.0482901503,  0.0569895100, -0.7073882007,
     0.0475784874,  0.9979386562, -0.7986399100,  2.3602528356,  0.2684324580,
     0.1990384723,  0.5120048524,  0.1173642314, -0.0795701966,  1.0397917513,
     0.5595625038,  0.4891394311, -0.8005491814,  0.8250224047, -0.4951361214,
     0.7318999856, -0.1073955752,  0.3938375968,  2.5952334951,  0.6090591366,
    -1.1214015460,  0.9029665949, -0.5673153372, -0.2656858156,  1.3709817892,
     0.4403950702,  0.8427875959, -1.4322516864, -2.3966771885, -0.5254730889,
    -0.9684410222, -0.9771413408, -0.1433294585, -0.0762321888, -0.1567987618,
    -1.1819475150, -0.0474164159,  0.7844966356, -0.0560630477, -1.7589399923,
    -0.1558345317,  0.4772184326,  1.0483329959, -2.6409602680, -0.9308301555,
     0.6775319407, -1.1422156825,  0.7287175696, -0.9213283107, -0.1296265986,
    -1.2669148576,  1.8429639171,  0.2519994692,  0.5521480300, -0.8107314391,
    -0.1898182759, -0.8515297167, -0.3080308191,  1.5946137742, -0.0399841656,
    -0.8625607154,  0.8708287508,  0.6527366193,  1.7250991540, -0.0431140238,
    -0.1959982546,  1.7383745529,  0.8924077095,  0.2632320750,  0.7310695114,
     1.3466574511, -1.0393174943, -0.3196421399,  0.5129144782, -0.4274456152,
    -0.6363105314,  0.7607772349, -0.8780598400, -0.9742539507,  0.7658265035,
    -0.9224058846, -0.3410702645, -0.6602195362,  0.6703296946, -0.4425964295,
    -2.0710929703, -1.6616645573,  0.4049609423,  0.0171443752, -1.0948238397,
     0.1009074844, -0.0984949620, -0.5612649411, -0.4209386050, -1.2025929091,
    -0.4437906159, -0.7994118943, -1.6941561689,  2.0720641552, -0.1503469080,
    -0.8849957441, -0.4468677297, -1.4140926322, -0.2824797270,  1.1566844381,
    -1.1876776722,  0.5482083674, -0.4586203138,  1.5552190789,  0.7041465470,
    -0.0007431165,  1.1824945924, -0.7839761866,  0.0157344677,  1.3670131173,
     0.8257242823,  0.3789688337,  0.0913943249,  1.1526156767, -1.8584148563,
    -0.6638464363,  1.9233827887,  1.8531024239, -1.5239575431,  0.3214089559,
    -1.5006598069, -0.6600649295, -0.0375351103,  0.4851938226,  0.4826967685,
    -1.0882033817,  0.6892359995,  1.3987481338, -0.5264206372, -2.7260862862,
    -1.0269089129, -0.9925386363, -0.6775409068,  1.0481414261,  0.7340909597,
    -0.0836947710, -0.6137026152,  0.0400301126, -0.0318887722, -0.1818707535,
    -0.4710325900,  0.8622026267, -0.9078050240,  0.0770368224, -1.3116935508,
    -0.3497160029, -0.0135659749, -1.6174139313, -0.0247807995, -0.6915915828,
     2.2841966534, -1.3995020929, -0.3783089660, -1.3121338431, -0.2944572199,
     0.7799079660,  0.2770992609,  0.7107181940,  0.3285131391, -0.4532487393,
     1.9232356975,  0.7377711637,  0.3189092744,  0.1902430870, -0.5043505254,
    -0.0368014887,  1.2423997243, -0.2471074976, -1.3103723936, -1.1181443824,
    -0.1212012232, -0.0579638970,  1.4416192076, -0.9243100868, -0.1708060090;
  
  step_normal_helper <<
    -0.548121086, -0.547380699,  0.868458223,  1.706546025,  0.384827652,
     1.152821705,  0.653994524,  0.147911871,  0.173807396,  0.295615014,
     1.784018430, -0.447004918, -0.927536737,  0.657506894, -0.672645112,
    -0.294494255, -1.032353989, -0.807807728,  0.229905556,  0.996862382,
     0.963144684,  0.225917683, -0.320249853,  0.652908358, -0.803885431,
    -0.354021290,  0.844915280, -1.453992022, -0.094984529,  0.870258976,
    -0.135529249, -1.073061319, -0.175832753,  1.938696693,  0.282307494,
     1.036912872,  0.435942450, -0.609375904, -0.673038383,  0.527861947,
     0.013417649,  0.832413802,  0.974000872,  0.334244431,  0.507730432,
     0.245777306,  0.867741620,  1.658924378, -0.944058323, -0.151401816,
    -0.804241536, -0.176290336,  0.831042045, -0.269553120,  1.511332902,
     1.173295845, -0.554419689, -1.454987179, -0.410916566,  0.099397430,
     0.722228830, -1.634604902, -1.513028079,  0.880043153, -1.057247081,
     0.732242544, -1.069971301,  0.095066876,  0.916917653, -0.381566633,
    -0.452790203,  0.008328297, -0.274890217,  1.200800702, -0.279603330,
    -1.435197147, -1.500434015,  1.663571682, -0.315830302,  2.415789002,
     0.297673079, -1.007166446,  0.089754075,  0.288703458,  0.048290843,
    -1.819064736,  0.051202858,  1.902546214,  0.272934769,  1.183252231,
     0.183649826, -0.842680981,  2.304868738, -1.540491180, -0.366537320,
    -0.109786364, -0.267407464,  0.010191277, -0.002663947, -0.063302403,
    -1.157144596,  3.459763146,  0.728742979, -0.195616668,  1.476465706,
     0.284495072, -0.036886145,  1.108338688, -0.830643769,  0.471109713,
     2.657046321, -0.038006374, -0.585741844, -0.764324978, -1.648633075,
    -0.356514784,  0.898575178, -0.248194054,  0.749140497, -1.594093537,
    -0.958644516, -0.473170010,  0.191641853, -1.153348348,  0.980378199,
    -1.039286229,  1.343173400,  0.951399260,  0.393738246,  0.618379417,
    -0.308077482, -0.224438345,  0.507120458, -2.542786288,  0.503528801,
    -0.023323237,  0.024187540, -0.422882931,  0.515217517,  0.516948838,
     0.526100100, -0.553471586, -2.556892425, -0.688346415, -1.312786162,
     0.902595313,  0.334342571,  0.564918996, -0.796559478,  1.070429161,
     0.727998644,  1.810253107,  1.015722797, -1.158990826,  0.678669387,
    -1.162187859,  0.618936706, -0.271169738,  1.357499223,  0.343959039,
     1.422927151,  0.753243625, -0.245652244, -0.670493535, -1.869461229,
    -0.579309689, -1.175190640,  1.329662916,  1.295044353,  1.468149434,
     2.315300448,  0.332961357,  0.634383243, -0.325015448,  0.141305136,
     0.096294830,  0.197903350, -0.303058767, -0.426675658,  1.303685689,
     1.919657440, -0.113313595,  0.809699857, -1.771081709, -0.241242795,
    -0.204705138,  0.615402820,  0.123271257, -0.001720611, -0.041644387,
    -0.489283166, -0.135374477,  0.153306744, -0.400576690,  0.265772523,
    -1.690440673,  1.266148295, -0.137455381, -0.853160419,  1.971631881,
     1.422217957,  1.174134044, -0.347128287, -0.344877736, -1.383036033,
    -1.509443957, -0.007907832,  1.275380355,  0.412404729,  0.743348377,
    -2.020542686,  1.545551643,  1.139779694, -0.538113557, -0.386698745,
    -1.536481901,  1.513162883, -0.566134670,  0.278451029,  0.317877017,
    -0.873621783,  0.182999940,  0.459042145, -1.985269547,  0.575874024,
     1.231548747, -0.196961207,  1.137662094,  0.099363306, -0.067192886,
     0.416594730,  0.886219435, -0.745763455, -1.653412311, -1.763241286,
    -0.176992748,  0.327975305,  1.075139219, -0.692300894,  0.970887528,
    -0.302034757, -0.363189446, -0.384626170,  0.127970046,  0.475377266,
     0.131271635,  0.813987185, -1.234553761,  0.004073575,  0.799687705,
    -0.482770148, -0.877442740, -1.086709002, -0.666039348,  0.149570599,
     1.836087696,  0.162785379,  0.686644883, -1.320913604,  0.419882577,
     1.509048250, -0.258361154,  0.642952592, -0.123278689,  0.638711426,
     1.240711303, -2.763426689,  1.595548722, -0.773804168,  1.230160823,
    -0.737053677,  2.550065299,  0.070317458,  0.984681710,  0.016505837,
    -1.706342997,  1.179800515,  0.694657644, -1.162815468, -1.670289341,
    -0.926379747, -0.102326784,  1.199315682,  0.074067201,  1.299503087,
    -0.121926161,  1.495098266,  0.133981246, -0.296461558,  0.592618824,
    -1.443365175,  2.229251818,  0.342885052,  0.751477086, -0.779740301,
     0.947310108, -0.667784342, -1.194428856, -0.484236486,  0.143738304,
     0.476705190, -0.885178302,  0.734159628, -0.814663757,  0.164110013,
    -0.331159804, -0.323518123, -0.380633346, -1.920109492, -0.387190450,
     0.200522946,  0.753476106,  0.759946013,  0.261581809,  0.698479600,
     0.156522317,  0.083101113,  1.064519200, -0.842904215, -1.259651220,
    -0.963749852, -1.597687447,  0.689847435,  1.297017945, -0.552559059,
    -2.222037892,  1.520886832,  1.754244045, -0.438673753,  1.074948802,
    -0.408436914, -0.809981886,  1.972937183, -0.631858911,  1.049204282,
     0.169147262, -0.666941062,  0.549113869,  1.579456166, -1.542105951,
    -0.572002320,  1.062021442, -1.438556568, -0.729420541, -0.036624467,
     0.336136160,  0.532095341,  1.101444920, -0.751853052,  0.026140051,
     0.254303058, -0.144054466,  0.724718119, -1.296050126, -0.002886234,
     1.056797838,  0.530969379, -0.258877633,  0.241386033, -0.046080927,
     0.189436725, -0.908568380, -0.482138752, -0.457497760,  0.155496370;

  const double corr = -0.7;     // negative correllation to model leverage effect

  Eigen::Matrix<var, -1, -1> step_normal(2, n);
  step_normal_vol = corr * step_normal_asset + sqrt(1 - corr * corr) * step_normal_helper;
  step_normal.row(0) = step_normal_asset;
  step_normal.row(1) = step_normal_vol;

  Eigen::Matrix<double, -1, 1> y0(2);
  y0 << 100, 0.02;

  std::vector<double> params {0.1, 0.019, 6.21, 0.61};
  const double t_end = 1.0;
  Eigen::Matrix<var, -1, -1> y = ito_process_euler(f1, f2, y0, step_normal, params, params, t_end);
  EXPECT_FLOAT_EQ(y(0, n-1).val(), 121.451544564);
  EXPECT_FLOAT_EQ(y(1, n-1).val(), 0.0239870233034);
}
